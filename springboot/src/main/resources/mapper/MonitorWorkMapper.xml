<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.demo.mapper.MonitorWorkMapper">
    <update id="updateCrawlState" parameterType="java.lang.Integer">
        update monitor_work set crawlOk = #{state} where id = #{workId};
    </update>
    <update id="updateWordFreqState">
        update monitor_work set wordFreqOk = #{state} where id = #{workId};
    </update>
    <update id="updatePolarityState">
        update monitor_work set polarityOk = #{state} where id = #{workId};
    </update>
    <update id="updateSentimentState">
        update monitor_work set sentimentOk = #{state} where id = #{workId};
    </update>
    <select id="selectByUserId" resultType="com.example.demo.entity.MonitorWork">
        select *
        from monitor_work
        where id in (
            select workId from monitor_request mr
                inner join user us on (mr.userId = us.id)
            where us.username = 'root' or us.id = #{userId}
            )
        order by id
    </select>

    <select id="findWorkName" resultType="string">
        select name
        from monitor_work
        where id = #{workId}
    </select>
    <select id="selectByUserIdPaging" resultType="com.example.demo.entity.MonitorWork">
        select *
        from monitor_work
        where id in (
            select workId from monitor_request mr
                                   inner join user us on (mr.userId = us.id)
            where us.username = 'root' or us.id = #{userId}
        )
        order by id
    </select>
    <select id="selectRecommendWorksByUserId" resultType="com.example.demo.entity.vo.RecommendWorkVO"
            parameterType="java.lang.Integer">
        select rw.*, user.username, mw.name as workName,
               mw.category,
               mw.labels,
               mw.postTime,
               mw.content,
               mw.citeUrl,
               mw.imgUrl
        from (
                 select * from recommend_work where userId = ${userId}
             ) as rw
            inner join monitor_work as mw
            inner join user on(rw.workId=mw.id and rw.userId=user.id);
    </select>
    <select id="selectSubCategoryByCategory" resultType="org.springframework.data.util.Pair">
        select subCategory as first, count(subCategory) as second
        from monitor_work where category = #{category}
        <if test="onlyHunan == true">
            and isHunanWork = 1
        </if>
        group by subCategory
    </select>
    <select id="selectAllOrigin" resultType="org.springframework.data.util.Pair">
        select origin as first, count(origin) as second
        from monitor_work
        where isHunanWork = 1 and origin is not null and origin != ''
        group by origin
    </select>
    <select id="selectHunanWork" resultType="com.example.demo.entity.MonitorWork">
        select * from monitor_work
        where isHunanWork = 1
        <if test="subCategories != null and subCategories != ''">
            and subCategory in (${subCategories})
        </if>
        <if test="origins != null and origins != ''">
            and origin in (${origins})
        </if>
    </select>
    <select id="getAllSubCategory" resultType="java.lang.String">
        select distinct subCategory from monitor_work where subCategory is not NULL and category=#{category}
    </select>
    <select id="getAllCategory" resultType="java.lang.String">
        select distinct category from monitor_work where category is not NULL
    </select>
    <select id="getWorkAndCommentNumByCategory" resultType="com.example.demo.entity.WorkCommentNum">
        select monitor_work.id,monitor_work.name,COUNT(*) as count
        from monitor_work inner join raw_comment on monitor_work.id=raw_comment.workId
        where monitor_work.subCategory=#{subCategory}
        GROUP By monitor_work.id,monitor_work.name
    </select>

</mapper>
